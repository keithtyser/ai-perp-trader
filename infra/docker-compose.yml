# Docker Compose will automatically load .env file from this directory
# Make sure you have a .env file in infra/ folder with your secrets

services:
  db:
    image: postgres:15-alpine
    environment:
      POSTGRES_DB: ai_perp_trader
      POSTGRES_USER: agent
      POSTGRES_PASSWORD: agent_password
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ../db/schema.sql:/docker-entrypoint-initdb.d/01-schema.sql
      - ../db/seed.sql:/docker-entrypoint-initdb.d/02-seed.sql
      - ../db/migrations/2025_10_25_add_sim_tables.sql:/docker-entrypoint-initdb.d/03-migration.sql
      - ../db/migrations/2025_10_26_add_multi_agent_support.sql:/docker-entrypoint-initdb.d/04-multi-agent.sql
      - ../db/migrations/2025_10_26_add_market_prices.sql:/docker-entrypoint-initdb.d/05-market-prices.sql
      - ../db/migrations/2025_10_26_add_exit_plan_to_positions.sql:/docker-entrypoint-initdb.d/06-exit-plan.sql
      - ../db/migrations/2025_10_26_add_leverage_to_positions.sql:/docker-entrypoint-initdb.d/07-leverage.sql
      - ../db/migrations/2025_10_27_add_position_entry_time.sql:/docker-entrypoint-initdb.d/08-position-entry-time.sql
      - ../db/migrations/2025_10_27_add_observation_action_to_chat.sql:/docker-entrypoint-initdb.d/09-observation-action.sql
      - ../db/migrations/2025_10_28_add_agent_versions.sql:/docker-entrypoint-initdb.d/10-agent-versions.sql
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U agent -d ai_perp_trader"]
      interval: 5s
      timeout: 5s
      retries: 5

  api:
    build:
      context: ../apps/api
      dockerfile: ../../infra/Dockerfile.api
    environment:
      DATABASE_URL: postgresql://agent:agent_password@db:5432/ai_perp_trader
      CORS_ORIGINS: https://trade.keithtyser.com
    expose:
      - "8000"
    depends_on:
      db:
        condition: service_healthy
    restart: unless-stopped

  worker:
    build:
      context: ../apps/worker
      dockerfile: ../../infra/Dockerfile.worker
    environment:
      DATABASE_URL: postgresql://agent:agent_password@db:5432/ai_perp_trader
      OPENROUTER_API_KEY: ${OPENROUTER_API_KEY}
      OPENROUTER_MODEL: deepseek/deepseek-v3.2-exp
      # trading backend: perpsim (paper) or hyperliquid (live)
      TRADING_BACKEND: perpsim
      # hyperliquid credentials (only needed if TRADING_BACKEND=hyperliquid)
      HL_API_KEY: ${HL_API_KEY:-}
      HL_API_SECRET: ${HL_API_SECRET:-}
      HL_ACCOUNT: ${HL_ACCOUNT:-}
      HL_BASE_URL: https://api.hyperliquid-testnet.xyz
      # perpsim config
      SIM_IM: 0.05
      SIM_MM: 0.03
      SIM_MAX_LEVERAGE: 100.0
      SIM_SLIPPAGE_BPS: 1.0
      SIM_FEE_BPS: 2.0
      SIM_LIQ_PENALTY_BPS: 5.0
      SIM_FUNDING_MODE: A
      SIM_SYMBOLS: ${SIM_SYMBOLS:-BTC-USD,ETH-USD,SOL-USD,DOGE-USD,XRP-USD}
      SIM_TICK_SIZE: 0.5
      # data feed
      DATA_FEED: coinbase
      COINBASE_WS_URL: wss://ws-feed.exchange.coinbase.com
      # agent config
      CYCLE_INTERVAL_SECONDS: 60
      MIN_NOTIONAL: 5.0
      MAX_LEVERAGE: 100.0
      DRY_RUN: ${DRY_RUN:-false}
    depends_on:
      db:
        condition: service_healthy
    restart: unless-stopped

  web:
    build:
      context: ../apps/web
      dockerfile: ../../infra/Dockerfile.web
      args:
        NEXT_PUBLIC_API_BASE_URL: https://trade.keithtyser.com/api
    environment:
      # API will be accessed through /api/ path on same domain (proxied by nginx)
      NEXT_PUBLIC_API_BASE_URL: https://trade.keithtyser.com/api
    expose:
      - "3000"
    depends_on:
      - api
    restart: unless-stopped

  nginx:
    image: nginx:alpine
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/default.conf:/etc/nginx/conf.d/default.conf:ro
      - ./certbot/conf:/etc/letsencrypt:ro
      - ./certbot/www:/var/www/certbot:ro
    depends_on:
      - web
      - api
    restart: unless-stopped
    command: "/bin/sh -c 'while :; do sleep 6h & wait $${!}; nginx -s reload; done & nginx -g \"daemon off;\"'"

  certbot:
    image: certbot/certbot
    volumes:
      - ./certbot/conf:/etc/letsencrypt
      - ./certbot/www:/var/www/certbot
    entrypoint: "/bin/sh -c 'trap exit TERM; while :; do certbot renew; sleep 12h & wait $${!}; done;'"

volumes:
  postgres_data:

